Checks: >
  bugprone-*,
  performance-*,
  readability-*,
  cppcoreguidelines-*,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-owning-memory,
  -cppcoreguidelines-pro-bounds-pointer-arithmetic,
  -cppcoreguidelines-pro-type-vararg,
  -readability-magic-numbers,
  -modernize-use-trailing-return-type

WarningsAsErrors: '*'
HeaderFilterRegex: '.*'
ExtraArgs: [-Wno-error=clang-diagnostic-error]

CheckOptions:
  # Enforce naming rules (ROS 1 style)
  - { key: readability-identifier-naming.ClassCase,           value: CamelCase }
  - { key: readability-identifier-naming.FunctionCase,        value: camelBack }  # PascalCase if you prefer
  - { key: readability-identifier-naming.VariableCase,        value: lower_case }
  - { key: readability-identifier-naming.ParameterCase,       value: lower_case }
  - { key: readability-identifier-naming.ConstantCase,        value: lower_case }
  - { key: readability-identifier-naming.EnumCase,            value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantCase,    value: UPPER_CASE }
  - { key: readability-identifier-naming.MacroDefinitionCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.ConstexprVariableCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.NamespaceCase,       value: lower_case }
  - { key: readability-identifier-naming.MemberCase,          value: lower_case }
  - { key: readability-identifier-naming.MemberCase,          value: lower_case }
  - { key: readability-identifier-naming.MemberSuffix,        value: _ }
  - { key: readability-identifier-naming.IgnoreMainLikeFunctions, value: 1 }
  - { key: readability-identifier-naming.IgnoreFailedSplit, value: 1 }
